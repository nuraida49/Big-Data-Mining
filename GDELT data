#library and code setup
!apt-get update
!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!pip install -q pyspark
import pyspark, os
from pyspark import SparkConf, SparkContext
from pyspark.sql import *
os.environ["PYSPARK_PYTHON"]="python3"
os.environ["JAVA_HOME"]="/usr/lib/jvm/java-8-openjdk-amd64/"
os.environ['PYTHONHASHSEED']="0"


try:
  conf = SparkConf().setMaster("local[*]").set("spark.executor.memory", "1g").set("spark.executorEnv.PYTHONHASHSEED","0").set("spark.ui.port", "4050")
  sc = SparkContext(conf = conf)
  spark = SparkSession.builder.getOrCreate()
except ValueError:
  #it's ok if the server is already started
  pass

def dbg(x):
  """ A helper function to print debugging information on RDDs """
  if isinstance(x, pyspark.RDD):
    print([(t[0], list(t[1]) if 
            isinstance(t[1], pyspark.resultiterable.ResultIterable) else t[1])
           if isinstance(t, tuple) else t
           for t in x.take(100)])
  else:
    print(x)

!pip install gdelt
!pip install newspaper3k





#Downloading files from countries: MY, BX, ID, RP, SN and mapping the csv files to output the average tone of the first 10 days in each month, over 28 months period (Jan 1st 2020 to Apr 30th 2022)
sc = spark.sparkContext
malaysia = spark.read.csv("average tone malaysia.csv").rdd
brunei = spark.read.csv("average tone brunei.csv").rdd
indonesia = spark.read.csv("average tone indonesia.csv").rdd
philippines = spark.read.csv("average tone philippines.csv").rdd
singapore = spark.read.csv("average tone singapore.csv").rdd

#28 months in total
filtered_malaysia = malaysia.map(lambda x: x._c7).take(28)
filtered_brunei = brunei.map(lambda x: x._c4).take(28)
filtered_indonesia = indonesia.map(lambda x: x._c5).take(28)
filtered_philippines = philippines.map(lambda x: x._c4).take(28)
filtered_singapore = singapore.map(lambda x: x._c4).take(28)

#changing lists of strings into lists of floats for algorithm processing
for i in range(0, len(filtered_malaysia)):
  filtered_malaysia[i] = float(filtered_malaysia[i])
dbg(filtered_malaysia)

for i in range(0, len(filtered_brunei)):
  filtered_brunei[i] = float(filtered_brunei[i])
dbg(filtered_brunei)

for i in range(0, len(filtered_indonesia)):
  filtered_indonesia[i] = float(filtered_indonesia[i])
dbg(filtered_indonesia)

for i in range(0, len(filtered_philippines)):
  filtered_philippines[i] = float(filtered_philippines[i])
dbg(filtered_philippines)

for i in range(0, len(filtered_singapore)):
  filtered_singapore[i] = float(filtered_singapore[i])
dbg(filtered_singapore)



#Cosine Similarity between two countries
import numpy as np

def dot(list1, list2):
  return (sum(a*b for a,b in zip(list1, list2)))

def cosine_similarity(l1, l2):
  return dot(l1,l2) / ((dot(l1,l1) **.5) * (dot(l2,l2) ** .5))

dic = {"MY": filtered_malaysia, "BX": filtered_brunei, "ID": filtered_indonesia, "RP": filtered_philippines, "SN": filtered_singapore}
result = []

#"MY"
test_countries = ['BX', 'ID', 'RP', 'SN']
for i in range(0, len(test_countries)):
  print("MY &", test_countries[i], ":", str(cosine_similarity(dic["MY"], dic[(test_countries[i])])))
  result.append((cosine_similarity(dic["MY"], dic[(test_countries[i])]), "MY & " + test_countries[i]))

#"BX"
test_countries = ['ID', 'RP', 'SN']
for i in range(0, len(test_countries)):
  print("BX &", test_countries[i], ":", str(cosine_similarity(dic["BX"], dic[(test_countries[i])])))
  result.append((cosine_similarity(dic["BX"], dic[(test_countries[i])]), "BX & " + test_countries[i]))


#"ID"
test_countries = ['RP', 'SN']
for i in range(0, len(test_countries)):
  print("ID &", test_countries[i], ":", str(cosine_similarity(dic["ID"], dic[(test_countries[i])])))
  result.append((cosine_similarity(dic["ID"], dic[(test_countries[i])]), "ID & " + test_countries[i]))


#"RP"
print("RP & SN :", str(cosine_similarity(dic["RP"], dic["SN"])))
result.append((cosine_similarity(dic["RP"], dic[(test_countries[i])]), "RP & " + test_countries[i]))


print(sorted(result))
